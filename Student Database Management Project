#include <iostream>
#include <fstream>
#include <iomanip>
#include <cstring>
using namespace std;

class Student {
    int rollNo;
    char name[50];
    char department[30];
    float marks;
    float attendance;
    float gpa;

public:
    void input() {
        cout << "\nEnter Roll No: ";
        cin >> rollNo;
        cin.ignore();
        cout << "Enter Name: ";
        cin.getline(name, 50);
        cout << "Enter Department: ";
        cin.getline(department, 30);
        cout << "Enter Marks (0-100): ";
        cin >> marks;
        while (marks < 0 || marks > 100) {
            cout << "Invalid! Enter Marks (0-100): ";
            cin >> marks;
        }
        cout << "Enter Attendance % (0-100): ";
        cin >> attendance;
        while (attendance < 0 || attendance > 100) {
            cout << "Invalid! Enter Attendance % (0-100): ";
            cin >> attendance;
        }
        calculateGPA();
    }

    void display() const {
        cout << "\nRoll No: " << rollNo;
        cout << "\nName: " << name;
        cout << "\nDepartment: " << department;
        cout << "\nMarks: " << marks;
        cout << "\nAttendance: " << attendance << "%";
        cout << "\nGPA: " << gpa << endl;
    }

    void calculateGPA() {
        if (marks >= 90)
            gpa = 10.0;
        else if (marks >= 80)
            gpa = 9.0;
        else if (marks >= 70)
            gpa = 8.0;
        else if (marks >= 60)
            gpa = 7.0;
        else if (marks >= 50)
            gpa = 6.0;
        else if (marks >= 40)
            gpa = 5.0;
        else
            gpa = 0.0;
    }

    int getRollNo() const { return rollNo; }
    float getMarks() const { return marks; }
    float getGPA() const { return gpa; }

    void report() const {
        cout << setw(8) << rollNo
             << setw(20) << name
             << setw(15) << department
             << setw(8) << marks
             << setw(10) << attendance
             << setw(6) << gpa << endl;
    }
};

void writeStudent() {
    Student s;
    ofstream outFile("student.dat", ios::binary | ios::app);
    s.input();
    outFile.write(reinterpret_cast<char*>(&s), sizeof(Student));
    outFile.close();
    cout << "\nStudent record has been created.\n";
}

void displayAll() {
    Student s;
    ifstream inFile("student.dat", ios::binary);
    if (!inFile) {
        cout << "File could not be opened. Please check.\n";
        return;
    }
    cout << "\n\nAll Student Records:\n";
    while (inFile.read(reinterpret_cast<char*>(&s), sizeof(Student))) {
        s.display();
    }
    inFile.close();
}

void searchStudent(int roll) {
    Student s;
    ifstream inFile("student.dat", ios::binary);
    bool found = false;
    while (inFile.read(reinterpret_cast<char*>(&s), sizeof(Student))) {
        if (s.getRollNo() == roll) {
            s.display();
            found = true;
        }
    }
    inFile.close();
    if (!found)
        cout << "\nStudent not found.\n";
}

void deleteStudent(int roll) {
    Student s;
    ifstream inFile("student.dat", ios::binary);
    ofstream outFile("temp.dat", ios::binary);
    bool found = false;
    while (inFile.read(reinterpret_cast<char*>(&s), sizeof(Student))) {
        if (s.getRollNo() != roll)
            outFile.write(reinterpret_cast<char*>(&s), sizeof(Student));
        else
            found = true;
    }
    inFile.close();
    outFile.close();
    remove("student.dat");
    rename("temp.dat", "student.dat");
    if (found)
        cout << "\nStudent deleted successfully.\n";
    else
        cout << "\nStudent not found.\n";
}

void modifyStudent(int roll) {
    Student s;
    fstream file("student.dat", ios::binary | ios::in | ios::out);
    bool found = false;
    while (!file.eof() && !found) {
        int pos = file.tellg();
        file.read(reinterpret_cast<char*>(&s), sizeof(Student));
        if (s.getRollNo() == roll) {
            cout << "\nCurrent Details:\n";
            s.display();
            cout << "\nEnter New Details:\n";
            s.input();
            file.seekp(pos);
            file.write(reinterpret_cast<char*>(&s), sizeof(Student));
            cout << "\nRecord Updated.\n";
            found = true;
        }
    }
    file.close();
    if (!found)
        cout << "\nStudent not found.\n";
}

void displaySummary() {
    Student s;
    ifstream inFile("student.dat", ios::binary);
    cout << "\n\nSummary Report:\n";
    cout << setw(8) << "Roll No"
         << setw(20) << "Name"
         << setw(15) << "Department"
         << setw(8) << "Marks"
         << setw(10) << "Attend"
         << setw(6) << "GPA" << endl;
    while (inFile.read(reinterpret_cast<char*>(&s), sizeof(Student))) {
        s.report();
    }
    inFile.close();
}

int main() {
    int choice, roll;
    do {
        cout << "\n\n===== Student Database Menu =====";
        cout << "\n1. Add Student";
        cout << "\n2. Display All Students";
        cout << "\n3. Search Student by Roll No";
        cout << "\n4. Delete Student";
        cout << "\n5. Modify Student";
        cout << "\n6. Summary Report";
        cout << "\n7. Exit";
        cout << "\nChoose option: ";
        cin >> choice;

        switch (choice) {
            case 1: writeStudent(); break;
            case 2: displayAll(); break;
            case 3:
                cout << "Enter Roll No to search: ";
                cin >> roll;
                searchStudent(roll);
                break;
            case 4:
                cout << "Enter Roll No to delete: ";
                cin >> roll;
                deleteStudent(roll);
                break;
            case 5:
                cout << "Enter Roll No to modify: ";
                cin >> roll;
                modifyStudent(roll);
                break;
            case 6: displaySummary(); break;
            case 7: cout << "\nThank you. Exiting...\n"; break;
            default: cout << "\nInvalid choice!\n";
        }
    } while (choice != 7);

    return 0;
}
