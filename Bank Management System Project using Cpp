#include <iostream>
#include <fstream>
using namespace std;

class BankAccount {
    int accNumber;
    char name[50];
    char accType;
    double balance;

public:
    void createAccount();
    void showAccount() const;
    void modifyAccount();
    void deposit(double);
    void withdraw(double);
    int getAccNumber() const;
    double getBalance() const;
    char getAccType() const;
    void report() const;
};

void BankAccount::createAccount() {
    cout << "\nEnter Account Number: ";
    cin >> accNumber;
    cout << "Enter Account Holder Name: ";
    cin.ignore();
    cin.getline(name, 50);
    cout << "Enter Account Type (S/C): ";
    cin >> accType;
    cout << "Enter Initial Balance (>=500 for Saving, >=1000 for Current): ";
    cin >> balance;
    cout << "\nAccount Created Successfully!\n";
}

void BankAccount::showAccount() const {
    cout << "\nAccount No.: " << accNumber;
    cout << "\nAccount Holder: " << name;
    cout << "\nType of Account: " << accType;
    cout << "\nBalance: Rs. " << balance;
}

void BankAccount::modifyAccount() {
    cout << "\nModify Account Holder Name: ";
    cin.ignore();
    cin.getline(name, 50);
    cout << "Modify Account Type: ";
    cin >> accType;
    cout << "Modify Balance Amount: ";
    cin >> balance;
}

void BankAccount::deposit(double amt) {
    balance += amt;
}

void BankAccount::withdraw(double amt) {
    if ((balance - amt) >= 0)
        balance -= amt;
    else
        cout << "\nInsufficient balance!";
}

int BankAccount::getAccNumber() const {
    return accNumber;
}

double BankAccount::getBalance() const {
    return balance;
}

char BankAccount::getAccType() const {
    return accType;
}

void BankAccount::report() const {
    cout << accNumber << "\t" << name << "\t" << accType << "\t" << balance << endl;
}

void writeAccount();
void displayAccount(int);
void modifyAccount(int);
void deleteAccount(int);
void displayAll();
void depositWithdraw(int, int);

int main() {
    int choice;
    int num;

    do {
        cout << "\n\n--- Bank Management System ---\n";
        cout << "1. Create New Account\n";
        cout << "2. Display Account\n";
        cout << "3. Deposit Amount\n";
        cout << "4. Withdraw Amount\n";
        cout << "5. Display All Accounts\n";
        cout << "6. Delete Account\n";
        cout << "7. Modify Account\n";
        cout << "8. Exit\n";
        cout << "\nEnter Your Choice: ";
        cin >> choice;

        switch(choice) {
            case 1: writeAccount(); break;
            case 2:
                cout << "\nEnter Account Number: "; cin >> num;
                displayAccount(num);
                break;
            case 3:
                cout << "\nEnter Account Number: "; cin >> num;
                depositWithdraw(num, 1);
                break;
            case 4:
                cout << "\nEnter Account Number: "; cin >> num;
                depositWithdraw(num, 2);
                break;
            case 5: displayAll(); break;
            case 6:
                cout << "\nEnter Account Number: "; cin >> num;
                deleteAccount(num);
                break;
            case 7:
                cout << "\nEnter Account Number: "; cin >> num;
                modifyAccount(num);
                break;
            case 8: cout << "\nThanks for using the Bank Management System.\n"; break;
            default: cout << "\nInvalid choice! Try again.";
        }
    } while(choice != 8);

    return 0;
}

void writeAccount() {
    BankAccount ac;
    ofstream outFile;
    outFile.open("account.dat", ios::binary | ios::app);
    ac.createAccount();
    outFile.write(reinterpret_cast<char *> (&ac), sizeof(BankAccount));
    outFile.close();
}

void displayAccount(int n) {
    BankAccount ac;
    ifstream inFile;
    inFile.open("account.dat", ios::binary);
    if (!inFile) {
        cout << "\nFile could not be open! Press any key...";
        return;
    }
    bool found = false;
    while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(BankAccount))) {
        if(ac.getAccNumber() == n) {
            ac.showAccount();
            found = true;
        }
    }
    inFile.close();
    if(!found)
        cout << "\nRecord not found!";
}

void modifyAccount(int n) {
    BankAccount ac;
    fstream File;
    File.open("account.dat", ios::binary | ios::in | ios::out);
    bool found = false;
    while(!File.eof() && !found) {
        int pos = File.tellg();
        File.read(reinterpret_cast<char *> (&ac), sizeof(BankAccount));
        if(ac.getAccNumber() == n) {
            ac.showAccount();
            cout << "\nEnter new details:\n";
            ac.modifyAccount();
            File.seekp(pos);
            File.write(reinterpret_cast<char *> (&ac), sizeof(BankAccount));
            cout << "\nAccount Updated!";
            found = true;
        }
    }
    File.close();
    if(!found)
        cout << "\nRecord not found!";
}

void deleteAccount(int n) {
    BankAccount ac;
    ifstream inFile("account.dat", ios::binary);
    ofstream outFile("Temp.dat", ios::binary);
    while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(BankAccount))) {
        if(ac.getAccNumber() != n) {
            outFile.write(reinterpret_cast<char *> (&ac), sizeof(BankAccount));
        }
    }
    inFile.close();
    outFile.close();
    remove("account.dat");
    rename("Temp.dat", "account.dat");
    cout << "\nAccount Deleted Successfully!";
}

void displayAll() {
    BankAccount ac;
    ifstream inFile("account.dat", ios::binary);
    cout << "\n\nACCOUNT HOLDER LIST\n\n";
    cout << "A/C No.\tName\tType\tBalance\n";
    while(inFile.read(reinterpret_cast<char *> (&ac), sizeof(BankAccount))) {
        ac.report();
    }
    inFile.close();
}

void depositWithdraw(int n, int option) {
    BankAccount ac;
    fstream File;
    File.open("account.dat", ios::binary | ios::in | ios::out);
    bool found = false;
    while(!File.eof() && !found) {
        int pos = File.tellg();
        File.read(reinterpret_cast<char *> (&ac), sizeof(BankAccount));
        if(ac.getAccNumber() == n) {
            double amount;
            ac.showAccount();
            if(option == 1) {
                cout << "\nEnter amount to deposit: "; cin >> amount;
                ac.deposit(amount);
            } else {
                cout << "\nEnter amount to withdraw: "; cin >> amount;
                ac.withdraw(amount);
            }
            File.seekp(pos);
            File.write(reinterpret_cast<char *> (&ac), sizeof(BankAccount));
            cout << "\nTransaction Successful!";
            found = true;
        }
    }
    File.close();
    if(!found)
        cout << "\nRecord not found!";
}
